training.py

import cv2                 
import numpy as np         
import os                  
from random import shuffle 
from tqdm import tqdm




TRAIN_DIR = 'train'
TEST_DIR =  'test'

IMG_SIZE = 50
LR = 1e-3
MODEL_NAME = 'Parkinson-{}-{}.model'.format(LR, '2conv-basic')

 
def label_img(img):
    word_label = img[0]
    print(word_label)
  
    if word_label == 'n':
        print('No_Parkinson')
        return [1,0]
    
    elif word_label == 'y':
        print('Parkinson')
        return [0,1]

def create_train_data():
    training_data = []
    for img in tqdm(os.listdir(TRAIN_DIR)):
        label = label_img(img)
        print('##############')
        print(label)
        path = os.path.join(TRAIN_DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        training_data.append([np.array(img),np.array(label)])
    shuffle(training_data)
    np.save('train_data.npy', training_data)
    return training_data

def process_test_data():
    testing_data = []
    for img in tqdm(os.listdir(TEST_DIR)):
        path = os.path.join(TEST_DIR,img)
        img_num = img.split('.')[0]
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        testing_data.append([np.array(img), img_num])
        
    shuffle(testing_data)
    np.save('test_data.npy', testing_data)
    return testing_data

train_data = create_train_data()
# If you have already created the dataset:
#train_data = np.load('train_data.npy')


import tflearn
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
import tensorflow as tf
tf.compat.v1.reset_default_graph()
#tf.reset_default_graph()

convnet = input_data(shape=[None, IMG_SIZE, IMG_SIZE, 3], name='input')

convnet = conv_2d(convnet, 32, 3, activation='relu')
convnet = max_pool_2d(convnet, 3)

convnet = conv_2d(convnet, 64, 3, activation='relu')
convnet = max_pool_2d(convnet, 3)

convnet = conv_2d(convnet, 128, 3, activation='relu')
convnet = max_pool_2d(convnet, 3)

convnet = conv_2d(convnet, 32, 3, activation='relu')
convnet = max_pool_2d(convnet, 3)

convnet = conv_2d(convnet, 64, 3, activation='relu')
convnet = max_pool_2d(convnet, 3)

convnet = fully_connected(convnet, 1024, activation='relu')
convnet = dropout(convnet, 0.8)

convnet = fully_connected(convnet, 2, activation='softmax')
convnet = regression(convnet, optimizer='adam', learning_rate=LR, loss='categorical_crossentropy', name='targets')

model = tflearn.DNN(convnet, tensorboard_dir='log')

if os.path.exists('{}.meta'.format(MODEL_NAME)):
    model.load(MODEL_NAME)
    print('model loaded!')

train = train_data[:-1]
test = train_data[-32:]

X = np.array([i[0] for i in train]).reshape(-1,IMG_SIZE,IMG_SIZE,3)
Y = [i[1] for i in train]
print(X.shape)
test_x = np.array([i[0] for i in test]).reshape(-1,IMG_SIZE,IMG_SIZE,3)
test_y = [i[1] for i in test]
print(test_x.shape)

model.fit({'input': X}, {'targets': Y},n_epoch=100, validation_set=({'input': test_x}, {'targets': test_y}),snapshot_step=500, show_metric=True, run_id=MODEL_NAME)

model.save(MODEL_NAME)


app.py

import shutil
import os
import sys
import json
import math
from PIL import Image
from flask import Flask, render_template, request
import cv2  # working with, mainly resizing, images
import numpy as np  # dealing with arrays
import os  # dealing with directories
from random import shuffle  # mixing up or currently ordered data that might lead our network astray in training.
from tqdm import \
    tqdm  # a nice pretty percentage bar for tasks. Thanks to viewer Daniel BA1/4hler for this suggestion
import tflearn
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
import tensorflow as tf
import matplotlib.pyplot as plt
from PIL import ImageTk, Image
from keras.models import load_model


import random

# global b
app = Flask(__name__)
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/cnn', methods=['GET', 'POST'])
def cnn():
    if request.method == 'POST':
        dirPath = "static/images"
        fileList = os.listdir(dirPath)
        for fileName in fileList:
            os.remove(dirPath + "/" + fileName)
        fileName=request.form['filename']
        dst = "static/images"

        shutil.copy("test/"+fileName, dst)
        
        verify_dir = 'static/images'
        IMG_SIZE = 50
        LR = 1e-3
        MODEL_NAME = 'Parkinson-{}-{}.model'.format(LR, '2conv-basic')
    ##    MODEL_NAME='keras_model.h5'
        def process_verify_data():
            verifying_data = []
            for img in tqdm(os.listdir(verify_dir)):
                path = os.path.join(verify_dir, img)
                img_num = img.split('.')[0]
                img = cv2.imread(path, cv2.IMREAD_COLOR)
                img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                verifying_data.append([np.array(img), img_num])
            np.save('verify_data.npy', verifying_data)
            return verifying_data

        verify_data = process_verify_data()
        #verify_data = np.load('verify_data.npy')
        tf.compat.v1.reset_default_graph()
        #tf.reset_default_graph()

        convnet = input_data(shape=[None, IMG_SIZE, IMG_SIZE, 3], name='input')

        convnet = conv_2d(convnet, 32, 3, activation='relu')
        convnet = max_pool_2d(convnet, 3)

        convnet = conv_2d(convnet, 64, 3, activation='relu')
        convnet = max_pool_2d(convnet, 3)

        convnet = conv_2d(convnet, 128, 3, activation='relu')
        convnet = max_pool_2d(convnet, 3)

        convnet = conv_2d(convnet, 32, 3, activation='relu')
        convnet = max_pool_2d(convnet, 3)

        convnet = conv_2d(convnet, 64, 3, activation='relu')
        convnet = max_pool_2d(convnet, 3)

        convnet = fully_connected(convnet, 1024, activation='relu')
        convnet = dropout(convnet, 0.8)

        convnet = fully_connected(convnet, 2, activation='softmax')
        convnet = regression(convnet, optimizer='adam', learning_rate=LR, loss='categorical_crossentropy', name='targets')

        model = tflearn.DNN(convnet, tensorboard_dir='log')

        if os.path.exists('{}.meta'.format(MODEL_NAME)):
            model.load(MODEL_NAME)
            print('model loaded!')


        accuracy=" "
        str_label=" "
        for num, data in enumerate(verify_data):

            img_num = data[1]
            img_data = data[0]

            #y = fig.add_subplot(3, 4, num + 1)
            orig = img_data
            data = img_data.reshape(IMG_SIZE, IMG_SIZE, 3)
            # model_out = model.predict([data])[0]
            model_out = model.predict([data])[0]
            print(model_out)
            print('model {}'.format(np.argmax(model_out)))

            if np.argmax(model_out) == 0:
                str_label = 'No Parkinson'
                print("The predicted image of the No Parkinson is with a accuracy of {} %".format(model_out[0]*100))
                accuracy = "The predicted image of the No Parkinsonis with a accuracy of {} %".format(model_out[0]*100)
               


            elif np.argmax(model_out) == 1:
                str_label = 'Parkinson'
                print("The predicted image of the Parkinson is with a accuracy of {} %".format(model_out[1]*100))
                accuracy = "The predicted image of the Parkinson is with a accuracy of {} %".format(model_out[1]*100)
                
            
           
            
               

               

        return render_template('index.html', status=str_label, accuracy=accuracy, ImageDisplay="http://127.0.0.1:5000/static/images/"+fileName)
    return render_template('index.html')



        

            
        

if __name__ == '__main__':
    app.run(debug=True)

index.html


<!DOCTYPE html>
<html>
<head>
    <title>Parkinson's Detection</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <style>
      body {
        background: radial-gradient(ellipse at center, #1b2735 0%, #090a0f 100%);
        color: white;
      }
      input[type=submit], input[type=file]{
        /* width: 50%; */
        border:1px solid #ffffff;
        color: white;
        background-color: transparent;
        /* padding:14px 0; */
        margin: 8px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      input[type=submit]{
        border:1px solid #ffffff;
      }
      input[type=submit]:hover{
        background-color: #ffffff;
        color: black;
      }
      h3{
        border-bottom:1px solid #ffffff;
        padding-bottom: 10px;
        text-align: center;
      }
    </style>
</head>
<!-- <body style="background-image: url('static/leaf.jpeg');"> -->
  <body>
  <!-- <center> -->
    <div class="container">
      <h1 style="padding-top: 50px; text-align: center;">PARKINSONS DETECTION</h1>
    <div class="row">
      <div class="col-sm-4">
       <h3>CNN</h3>

        <form action="{{url_for('cnn')}}" method="POST" style="display: flex;">          
          <input type="file" id="file" name="filename" required>
          <input type="submit" value="Analyse">
        </form> 

        </div>
        
        

        <div class="col-sm-4">
       <h3>Selected Image</h3>
      {% if (ImageDisplay) %}
      <img src="{{ImageDisplay}}" width="100%">
      {% endif %}
 
      </div>



<div class="col-sm-4">
  <h3>Result</h3>
      {% if (status) %}
              <p><b>Status: </b>{{status}}</p>
              {% endif %}
              {% if (accuracy) %}
              <p><b>Accuracy: </b>{{accuracy}}</p>
              {% endif %}
            </div>
    </div>
    
  
</div>
<!-- </center> -->
</body>
</html>









        
